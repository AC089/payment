// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payment.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 支付渠道枚举
type PayChannelEnum int32

const (
	PayChannelEnum_UNKNOWN    PayChannelEnum = 0
	PayChannelEnum_ALIPAY_APP PayChannelEnum = 1
	PayChannelEnum_ALIPAY_H5  PayChannelEnum = 2
	PayChannelEnum_WECHAT_APP PayChannelEnum = 3
	PayChannelEnum_WECHAT_H5  PayChannelEnum = 4
	PayChannelEnum_IOSPAID    PayChannelEnum = 5
)

var PayChannelEnum_name = map[int32]string{
	0: "UNKNOWN",
	1: "ALIPAY_APP",
	2: "ALIPAY_H5",
	3: "WECHAT_APP",
	4: "WECHAT_H5",
	5: "IOSPAID",
}

var PayChannelEnum_value = map[string]int32{
	"UNKNOWN":    0,
	"ALIPAY_APP": 1,
	"ALIPAY_H5":  2,
	"WECHAT_APP": 3,
	"WECHAT_H5":  4,
	"IOSPAID":    5,
}

func (x PayChannelEnum) String() string {
	return proto.EnumName(PayChannelEnum_name, int32(x))
}

func (PayChannelEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{0}
}

// 支付回调ACK枚举
type AckEnum int32

const (
	AckEnum_FAIL    AckEnum = 0
	AckEnum_SUCCESS AckEnum = 1
)

var AckEnum_name = map[int32]string{
	0: "FAIL",
	1: "SUCCESS",
}

var AckEnum_value = map[string]int32{
	"FAIL":    0,
	"SUCCESS": 1,
}

func (x AckEnum) String() string {
	return proto.EnumName(AckEnum_name, int32(x))
}

func (AckEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{1}
}

//pay接口请求参数
type PayRequest struct {
	PayAppCode           string         `protobuf:"bytes,1,opt,name=payAppCode,proto3" json:"payAppCode,omitempty"`
	ServerId             string         `protobuf:"bytes,2,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
	AccountId            uint64         `protobuf:"varint,3,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	PayChannel           PayChannelEnum `protobuf:"varint,4,opt,name=PayChannel,proto3,enum=pb.PayChannelEnum" json:"PayChannel,omitempty"`
	TimeExpire           int64          `protobuf:"varint,5,opt,name=TimeExpire,proto3" json:"TimeExpire,omitempty"`
	Amount               uint64         `protobuf:"varint,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Description          string         `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	ClientIp             string         `protobuf:"bytes,8,opt,name=ClientIp,proto3" json:"ClientIp,omitempty"`
	Device               string         `protobuf:"bytes,9,opt,name=Device,proto3" json:"Device,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PayRequest) Reset()         { *m = PayRequest{} }
func (m *PayRequest) String() string { return proto.CompactTextString(m) }
func (*PayRequest) ProtoMessage()    {}
func (*PayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{0}
}
func (m *PayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayRequest.Merge(m, src)
}
func (m *PayRequest) XXX_Size() int {
	return m.Size()
}
func (m *PayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayRequest proto.InternalMessageInfo

func (m *PayRequest) GetPayAppCode() string {
	if m != nil {
		return m.PayAppCode
	}
	return ""
}

func (m *PayRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *PayRequest) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PayRequest) GetPayChannel() PayChannelEnum {
	if m != nil {
		return m.PayChannel
	}
	return PayChannelEnum_UNKNOWN
}

func (m *PayRequest) GetTimeExpire() int64 {
	if m != nil {
		return m.TimeExpire
	}
	return 0
}

func (m *PayRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PayRequest) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *PayRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

//pay接口相应参数
type PayReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	CodeMsg              string   `protobuf:"bytes,2,opt,name=CodeMsg,proto3" json:"CodeMsg,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayReply) Reset()         { *m = PayReply{} }
func (m *PayReply) String() string { return proto.CompactTextString(m) }
func (*PayReply) ProtoMessage()    {}
func (*PayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{1}
}
func (m *PayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayReply.Merge(m, src)
}
func (m *PayReply) XXX_Size() int {
	return m.Size()
}
func (m *PayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PayReply.DiscardUnknown(m)
}

var xxx_messageInfo_PayReply proto.InternalMessageInfo

func (m *PayReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PayReply) GetCodeMsg() string {
	if m != nil {
		return m.CodeMsg
	}
	return ""
}

func (m *PayReply) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

//Ack回调请求参数
type AckRequest struct {
	PayAppCode           string   `protobuf:"bytes,1,opt,name=payAppCode,proto3" json:"payAppCode,omitempty"`
	OutTradeNo           uint64   `protobuf:"varint,2,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`
	AckCode              AckEnum  `protobuf:"varint,3,opt,name=AckCode,proto3,enum=pb.AckEnum" json:"AckCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{2}
}
func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(m, src)
}
func (m *AckRequest) XXX_Size() int {
	return m.Size()
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetPayAppCode() string {
	if m != nil {
		return m.PayAppCode
	}
	return ""
}

func (m *AckRequest) GetOutTradeNo() uint64 {
	if m != nil {
		return m.OutTradeNo
	}
	return 0
}

func (m *AckRequest) GetAckCode() AckEnum {
	if m != nil {
		return m.AckCode
	}
	return AckEnum_FAIL
}

//Ack回调返回数据
type AckReply struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	CodeMsg              string   `protobuf:"bytes,2,opt,name=CodeMsg,proto3" json:"CodeMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckReply) Reset()         { *m = AckReply{} }
func (m *AckReply) String() string { return proto.CompactTextString(m) }
func (*AckReply) ProtoMessage()    {}
func (*AckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{3}
}
func (m *AckReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckReply.Merge(m, src)
}
func (m *AckReply) XXX_Size() int {
	return m.Size()
}
func (m *AckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AckReply.DiscardUnknown(m)
}

var xxx_messageInfo_AckReply proto.InternalMessageInfo

func (m *AckReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AckReply) GetCodeMsg() string {
	if m != nil {
		return m.CodeMsg
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.PayChannelEnum", PayChannelEnum_name, PayChannelEnum_value)
	proto.RegisterEnum("pb.AckEnum", AckEnum_name, AckEnum_value)
	proto.RegisterType((*PayRequest)(nil), "pb.PayRequest")
	proto.RegisterType((*PayReply)(nil), "pb.PayReply")
	proto.RegisterType((*AckRequest)(nil), "pb.AckRequest")
	proto.RegisterType((*AckReply)(nil), "pb.AckReply")
}

func init() { proto.RegisterFile("payment.proto", fileDescriptor_6362648dfa63d410) }

var fileDescriptor_6362648dfa63d410 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0xae, 0x9a, 0x4e,
	0x14, 0xc6, 0x1d, 0x41, 0x81, 0xe3, 0xff, 0x1a, 0x32, 0x8b, 0x7f, 0x26, 0x37, 0x0d, 0x21, 0x24,
	0x37, 0x31, 0x77, 0xe1, 0xc2, 0xe6, 0x26, 0xdd, 0x4e, 0xd1, 0x56, 0x52, 0xab, 0x04, 0xbc, 0x31,
	0x5d, 0x35, 0x08, 0x93, 0x5e, 0xa2, 0xc2, 0x14, 0xf1, 0xa6, 0xbc, 0x49, 0x1f, 0xa1, 0x8f, 0xd2,
	0x65, 0x1f, 0xa1, 0xb1, 0x2f, 0xd2, 0xcc, 0x88, 0x4a, 0x77, 0xed, 0xca, 0xf9, 0xce, 0xf7, 0x79,
	0xce, 0x9c, 0x1f, 0x00, 0x37, 0x3c, 0xaa, 0x76, 0x2c, 0x2b, 0x87, 0xbc, 0xc8, 0xcb, 0x1c, 0xb7,
	0xf9, 0xda, 0xf9, 0xd6, 0x06, 0xf0, 0xa3, 0x2a, 0x60, 0x9f, 0x0f, 0x6c, 0x5f, 0x62, 0x0b, 0x80,
	0x47, 0x15, 0xe5, 0xdc, 0xcd, 0x13, 0x46, 0x90, 0x8d, 0x06, 0x46, 0xd0, 0xa8, 0xe0, 0x5b, 0xd0,
	0x43, 0x56, 0x3c, 0xb3, 0xc2, 0x4b, 0x48, 0x5b, 0xba, 0x17, 0x8d, 0x5f, 0x80, 0x41, 0xe3, 0x38,
	0x3f, 0x64, 0xa5, 0x97, 0x10, 0xc5, 0x46, 0x03, 0x35, 0xb8, 0x16, 0xf0, 0x48, 0xce, 0x71, 0x9f,
	0xa2, 0x2c, 0x63, 0x5b, 0xa2, 0xda, 0x68, 0xd0, 0x1f, 0xe1, 0x21, 0x5f, 0x0f, 0xaf, 0xd5, 0x49,
	0x76, 0xd8, 0x05, 0x8d, 0x94, 0xb8, 0xcd, 0x32, 0xdd, 0xb1, 0xc9, 0x17, 0x9e, 0x16, 0x8c, 0x74,
	0x6c, 0x34, 0x50, 0x82, 0x46, 0x05, 0xff, 0x0f, 0x5d, 0xba, 0x13, 0xfd, 0x49, 0x57, 0x8e, 0xab,
	0x15, 0xb6, 0xa1, 0x37, 0x66, 0xfb, 0xb8, 0x48, 0x79, 0x99, 0xe6, 0x19, 0xd1, 0xe4, 0x45, 0x9b,
	0x25, 0xb1, 0x87, 0xbb, 0x4d, 0x59, 0x56, 0x7a, 0x9c, 0xe8, 0xa7, 0x3d, 0xce, 0x5a, 0x74, 0x1d,
	0xb3, 0xe7, 0x34, 0x66, 0xc4, 0x90, 0x4e, 0xad, 0x9c, 0x19, 0xe8, 0x92, 0x14, 0xdf, 0x56, 0x18,
	0x83, 0x7a, 0x21, 0xd4, 0x09, 0xe4, 0x19, 0x13, 0xd0, 0xc4, 0xef, 0xfb, 0xfd, 0xa7, 0x1a, 0xcd,
	0x59, 0x8a, 0xf4, 0x3a, 0x4f, 0x2a, 0x09, 0xc5, 0x08, 0xe4, 0xd9, 0xd9, 0x03, 0xd0, 0x78, 0xf3,
	0xb7, 0xdc, 0x2d, 0x80, 0xc5, 0xa1, 0x5c, 0x16, 0x51, 0xc2, 0xe6, 0xb9, 0x6c, 0xaf, 0x06, 0x8d,
	0x0a, 0xbe, 0x03, 0x8d, 0xc6, 0x1b, 0xf9, 0x67, 0x45, 0xa2, 0xed, 0x09, 0xb4, 0x34, 0xde, 0x48,
	0xa6, 0x67, 0xcf, 0x79, 0x05, 0xba, 0x1c, 0xfa, 0xcf, 0x2b, 0xdc, 0x3f, 0x41, 0xff, 0xcf, 0x07,
	0x85, 0x7b, 0xa0, 0x3d, 0xce, 0xdf, 0xcd, 0x17, 0xab, 0xb9, 0xd9, 0xc2, 0x7d, 0x00, 0x3a, 0xf3,
	0x7c, 0xfa, 0xe1, 0x23, 0xf5, 0x7d, 0x13, 0xe1, 0x1b, 0x30, 0x6a, 0x3d, 0x7d, 0x30, 0xdb, 0xc2,
	0x5e, 0x4d, 0xdc, 0x29, 0x5d, 0x4a, 0x5b, 0x11, 0x76, 0xad, 0xa7, 0x0f, 0xa6, 0x2a, 0x5a, 0x79,
	0x8b, 0xd0, 0xa7, 0xde, 0xd8, 0xec, 0xdc, 0xdb, 0x72, 0x15, 0x39, 0x42, 0x07, 0xf5, 0x0d, 0xf5,
	0x66, 0x66, 0x4b, 0x24, 0xc2, 0x47, 0xd7, 0x9d, 0x84, 0xa1, 0x89, 0x46, 0x2b, 0xd0, 0xde, 0x16,
	0x8c, 0x95, 0xac, 0xc0, 0x77, 0xa0, 0xf8, 0x51, 0x85, 0xfb, 0xf5, 0x8b, 0x54, 0xe3, 0xbc, 0xfd,
	0xef, 0xa2, 0xf9, 0xb6, 0x72, 0x5a, 0x22, 0x46, 0xe3, 0xcd, 0x29, 0x76, 0xa5, 0x7e, 0x8a, 0x9d,
	0x81, 0x38, 0xad, 0xd7, 0xe6, 0xf7, 0xa3, 0x85, 0x7e, 0x1c, 0x2d, 0xf4, 0xf3, 0x68, 0xa1, 0xaf,
	0xbf, 0xac, 0xd6, 0xba, 0x2b, 0xbf, 0x94, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x00, 0x37,
	0x78, 0xc8, 0x3a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayReply, error) {
	out := new(PayReply)
	err := c.cc.Invoke(ctx, "/pb.Greeter/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckReply, error) {
	out := new(AckReply)
	err := c.cc.Invoke(ctx, "/pb.Greeter/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	Pay(context.Context, *PayRequest) (*PayReply, error)
	Ack(context.Context, *AckRequest) (*AckReply, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) Pay(ctx context.Context, req *PayRequest) (*PayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedGreeterServer) Ack(ctx context.Context, req *AckRequest) (*AckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Greeter/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Greeter/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pay",
			Handler:    _Greeter_Pay_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _Greeter_Ack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}

func (m *PayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Amount != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	if m.TimeExpire != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.TimeExpire))
		i--
		dAtA[i] = 0x28
	}
	if m.PayChannel != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.PayChannel))
		i--
		dAtA[i] = 0x20
	}
	if m.AccountId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.AccountId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PayAppCode) > 0 {
		i -= len(m.PayAppCode)
		copy(dAtA[i:], m.PayAppCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayAppCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CodeMsg) > 0 {
		i -= len(m.CodeMsg)
		copy(dAtA[i:], m.CodeMsg)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CodeMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckCode != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.AckCode))
		i--
		dAtA[i] = 0x18
	}
	if m.OutTradeNo != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.OutTradeNo))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PayAppCode) > 0 {
		i -= len(m.PayAppCode)
		copy(dAtA[i:], m.PayAppCode)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PayAppCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AckReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CodeMsg) > 0 {
		i -= len(m.CodeMsg)
		copy(dAtA[i:], m.CodeMsg)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CodeMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayAppCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.AccountId != 0 {
		n += 1 + sovPayment(uint64(m.AccountId))
	}
	if m.PayChannel != 0 {
		n += 1 + sovPayment(uint64(m.PayChannel))
	}
	if m.TimeExpire != 0 {
		n += 1 + sovPayment(uint64(m.TimeExpire))
	}
	if m.Amount != 0 {
		n += 1 + sovPayment(uint64(m.Amount))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPayment(uint64(m.Code))
	}
	l = len(m.CodeMsg)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayAppCode)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.OutTradeNo != 0 {
		n += 1 + sovPayment(uint64(m.OutTradeNo))
	}
	if m.AckCode != 0 {
		n += 1 + sovPayment(uint64(m.AckCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AckReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPayment(uint64(m.Code))
	}
	l = len(m.CodeMsg)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAppCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayAppCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannel", wireType)
			}
			m.PayChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayChannel |= PayChannelEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeExpire", wireType)
			}
			m.TimeExpire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeExpire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAppCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayAppCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			m.OutTradeNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTradeNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCode", wireType)
			}
			m.AckCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCode |= AckEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
